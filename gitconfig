[color]
    ui = true

[init]
    defaultBranch = main

# Causes Git to remember how conflicts were resolved so if they occur again,
# they will be resolved the same way again. This is useful when rebasing over a
# conflict. Normally, each change in the rebased branch will conflict in the
# same way as each change is applied.
[rerere]
    enabled = true

[alias]
    # Using the first two letters of frequent commands really cuts down on
    # typing.
    br = branch
    ch = checkout
    cl = clone
    co = commit
    coa = commit -a
    din = diff --name-only

    di = diff -- ':(exclude)Cargo.lock'
    df = diff -- ':(exclude)Cargo.lock'
    dif = diff -- ':(exclude)Cargo.lock'
    # For some reason this alias doesn't work when it is named 'diff'.
    diff = diff -- ':(exclude)Cargo.lock'

    ph = push
    pushf = push --force
    pl = pull
    re = rebase
    # This little gem is here to automatically accept the existing commit message
    # and continue the rebase without popping up an editor to ask if I want to modify.
    rec = "!f() { GIT_EDITOR=true git rebase --continue ; }; f"
    st = status
    l = log --name-status
    xl = log --graph --oneline --all --reverse
    log = log --graph --oneline --all --reverse
    sl = smartlog

    delete-merged = "!f() {\
        [[ $(git rev-parse --abbrev-ref HEAD) == 'master' ]] && git branch --merged | egrep -v '\\*|master|dev' | xargs -n 1 git branch -d ; \
    }; f"
    c = clone
    amend = commit --amend --no-edit

    pr = "!f() {\
        git push -u origin $(git rev-parse --abbrev-ref HEAD) ; \
    }; f"

    move-branch = "!f() {\
        if [[ -z $1 || -z $2 ]]; then \
            echo \"git move-branch <branch-name> <new-sha>\" ;\
            return ;\
        fi ;\
        echo \"Moving the branch pointer.\" ;\
        echo git update-ref -m \"reset: Reset $1 to $2\" refs/heads/$2 $1 ;\
    }; f"

    #
    # Complex, multi-command aliases use the ! operator to invoke the shell.
    # Use the format of:
    #      tst = "!f() { echo 'one'; }; f"
    # because git both replaces positional args ($1, $2) and tacks them on the
    # end, but if you use the shell function, you only get the positional args
    # behavior, because the function invocation at the end captures the args
    # tacked on.
    #

    # Update mainline, all in one command, run from any branch, with uncommitted
    # changes.
    plma = "!f() {\
        NAME=$(git status | head -1 | sed 's|^# On branch ||') ; \
        exec 5>&1 ; \
        STASH=$(git stash | tee /dev/fd/5) ; \
        git checkout mainline ; \
        git pull ; \
        git checkout ${NAME} ; \
        echo $STASH | grep -qv 'No local changes' && git stash pop ; \
    }; f"

    # Process:
    #  1. Check for uncommitted changes.
    #     - fail if so
    #  2. pull mainline
    #     - fail if fails
    #  3. merge mainline
    #     - fail if problem.
    #  4. ch mainline
    #  5. merge --squash <br name>
    #  6. commit
    #     - detect committed code review if it history.
    #  7. delete the merged branch??
    squash = "!f() {\
        NAME=$(git status | head -1 | sed 's|^# On branch ||') ; \
        git checkout mainline ; \
        git pull ; \
        git checkout ${NAME} ; \
        echo $STASH | grep -qv 'No local changes' && git stash pop ; \
    }; f"

    ages = "!f() {\
        git branch \"$@\" | \
        grep -v 'HEAD' | \
        sed 's|*||' | \
        xargs -I{} -n 1 git log --pretty=format:'%at<>%Cgreen%ad%Creset<>%Cblue<>%aN<>%Creset<>{}%n' -1 {} | \
        sort -n | \
        awk '{\
            split($0, vals, \"<>\"); \
            name = sprintf(\"%.15s\", vals[4]); \
            printf \"%-39s %s%-15s%s %s\\n\", vals[2], vals[3], name, vals[5], vals[6]; \
        }' ;\
    }; f"

    dag = log --graph --format='format:%C(yellow)%h%C(reset) %C(blue)\"%an\" <%ae>%C(reset) %C(magenta)%cr%C(reset)%C(blue)%d%C(reset)%n%s' --date-order

[push]
    default = simple

[core]
    pager = delta --side-by-side
    editor = /home/jacobsimpson/bin/nvim
    excludesfile = ~/dotfiles/gitignore
	editor = nvim
	autocrlf = input

[delta]
    line-numbers = true
    zero-style = dim syntax
    navigate = true  # use n and N to move between diff sections
    pager = less -X -F

[branch]
	autosetuprebase = always

[interactive]
    diffFilter = delta --color-only

[merge]
    conflictstyle = diff3
