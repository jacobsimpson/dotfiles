[color]
    ui = true

[init]
    defaultBranch = main

# Causes Git to remember how conflicts were resolved so if they occur again,
# they will be resolved the same way again. This is useful when rebasing over a
# conflict. Normally, each change in the rebased branch will conflict in the
# same way as each change is applied.
[rerere]
    enabled = true

[alias]
    # Using the first two letters of frequent commands really cuts down on
    # typing.
    br = branch
    ch = checkout
    cl = clone
    co = commit
    coa = commit -a

    din = diff --name-only
    di = diff -- ':(exclude)Cargo.lock'
    df = diff -- ':(exclude)Cargo.lock'
    dif = diff -- ':(exclude)Cargo.lock'
    # For some reason this alias doesn't work when it is named 'diff'.
    diff = diff -- ':(exclude)Cargo.lock'

    ph = push
    pushf = push --force-with-lease
    pl = pull
    re = rebase
    # This little gem is here to automatically accept the existing commit message
    # and continue the rebase without popping up an editor to ask if I want to modify.
    rec = "!f() { GIT_EDITOR=true git rebase --continue ; }; f"
    st = status
    l = log --name-status
    xl = log --graph --oneline --all --reverse
    log = log --graph --oneline --all --reverse
    tree = log --graph --oneline --all
    sl = smartlog

    detach = !git checkout $(git rev-parse HEAD)
    resolve-lock = !git restore --staged Cargo.lock && git checkout Cargo.lock && cargo build && git add Cargo.lock

    c = clone
    # I used to use this one, however the one from git-branchless does all this
    # and more.
    #amend = commit --amend --no-edit

    p = prev
    pp = prev 2
    ppp = prev 3
    pppp = prev 4
    ppppp = prev 5
    pppppp = prev 6
    ppppppp = prev 7
    pppppppp = prev 8
    ppppppppp = prev 9
    pppppppppp = prev 10
    ppppppppppp = prev 11

    n = next
    nn = next 2
    nnn = next 3
    nnnn = next 4
    nnnnn = next 5
    nnnnnn = next 6
    nnnnnnn = next 7
    nnnnnnnn = next 8
    nnnnnnnnn = next 9
    nnnnnnnnnn = next 10
    nnnnnnnnnnn = next 11

    cpr = github-pull-request create
    upr = github-pull-request update
    #ppr = !gh pr ready
    #gpr = !GH_PAGER=  gh pr view --json url --template '{{printf "%s\n" .url}}'

    cpr = github-pull-request create
    upr = github-pull-request update
    ppr = !gh pr ready

    #
    # Complex, multi-command aliases use the ! operator to invoke the shell.
    # Use the format of:
    #      tst = "!f() { echo 'one'; }; f"
    # because git both replaces positional args ($1, $2) and tacks them on the
    # end, but if you use the shell function, you only get the positional args
    # behavior, because the function invocation at the end captures the args
    # tacked on.
    #

    # Process:
    #  1. Check for uncommitted changes.
    #     - fail if so
    #  2. pull mainline
    #     - fail if fails
    #  3. merge mainline
    #     - fail if problem.
    #  4. ch mainline
    #  5. merge --squash <br name>
    #  6. commit
    #     - detect committed code review if it history.
    #  7. delete the merged branch??
    squash = "!f() {\
        NAME=$(git status | head -1 | sed 's|^# On branch ||') ; \
        git checkout mainline ; \
        git pull ; \
        git checkout ${NAME} ; \
        echo $STASH | grep -qv 'No local changes' && git stash pop ; \
    }; f"

[push]
    default = simple

[core]
    pager = delta --side-by-side
    editor = /home/jacobsimpson/bin/nvim
    excludesfile = ~/dotfiles/gitignore
	editor = nvim
	autocrlf = input

[delta]
    line-numbers = true
    zero-style = dim syntax
    navigate = true  # use n and N to move between diff sections
    pager = less -X -F

[branch]
	autosetuprebase = always

[interactive]
    diffFilter = delta --color-only

[merge]
    conflictstyle = diff3
