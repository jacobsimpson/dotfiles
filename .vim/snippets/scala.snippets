snippet main
	def main(args: Array[String]) = {
		${1:/* code */}
	}
snippet re
	return
snippet if
	if (${1}) {
		${2}
	}
snippet el
	else {
		${1}
	}
snippet elif
	else if (${1}) {
		${2}
	}
snippet wh
	while (${1}) {
		${2}
	}
snippet for
	for (${1}; ${2}; ${3}) {
		${4}
	}
snippet fore
	for (${1} : ${2}) {
		${3}
	}
snippet tc
	import org.scalatest.FunSuite

	class ${1:`Filename()`} extends ${2:FunSuite} {
		${3}
	}
snippet t
	test("${1}") {
		${2}
		assert(${3})
	}
snippet cl
	class ${1:`Filename("", "untitled")`} ${2} {
		${3}
	}
snippet obj
	object ${1:`Filename("", "untitled")`} {
		${2}
	}
#snippet in
#	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
#snippet m
#	${1:void} ${2:method}(${3}) ${4:throws } {
#		${5}
#	}
#snippet v
#	${1:String} ${2:var}${3: = null}${4};${5}
#snippet co
#	static public final ${1:String} ${2:var} = ${3};${4}
#snippet cos
#	static public final String ${1:var} = "${2}";${3}
#snippet as
#	assert ${1:test} : "${2:Failure message}";${3}
#snippet println
#	System.out.println("${1}");
#snippet pm
#	public void ${1:method}(${2}) {
#		${3}
#	}
#snippet psm
#	public static void ${1:method}(${2}) {
#		${3}
#	}
#snippet pg
#	public ${1:type} get${2:fname}() {
#		return ${3:vname};
#	}
#snippet pgs
#	public ${1:type} get${2:fname}() {
#		return ${3:vname};
#	}
#
#	public void set$2($1 v) {
#		this.$3 = v;
#	}
#snippet toString
#	public String toString() {
#		return ${1};
#	}
#snippet try
#	try {
#		${1}
#	} catch (Exception e) {
#	}
