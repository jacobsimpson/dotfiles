
syntax on
filetype plugin indent off
set tabstop=4
" Sets how much indent for the >
set shiftwidth=4

" This will affect CtrlP plugin, and exclude files from the listing.
set wildignore+=*.o,*.class,.svn,*.jar,*.gif,*.jpg,*.pyc,.git,*.so,*.zip,*.swp

" Ignore these directories for Ctrl-P
set wildignore+=*/bin/*,*/build/*,*/target/*,*/node_modules/*,*/lib/*

" Each new line will match code block
set autoindent
" Tabs will be changed to equivalent spaces,
" affects autoindent and shift (>) operator.
set expandtab

" Toggle the NERDTree side bar on and off.
nmap <leader>d :NERDTreeToggle<CR>

" Search recursively for files.
nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>

" List the open buffers.
nnoremap <leader>b :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>

" Add incremental searching to vim.
set incsearch

" Set case insensitive searching.
set ignorecase
" If you include a capital letter in a search, vim switches to case sensitive searching.
set smartcase

" Jump to the next or previous line that has the same level or a lower
" level of indentation than the current line.
"
" exclusive (bool): true: Motion is exclusive
" false: Motion is inclusive
" fwd (bool): true: Go to next line
" false: Go to previous line
" lowerlevel (bool): true: Go to line with lower indentation level
" false: Go to line with the same indentation level
" skipblanks (bool): true: Skip blank lines
" false: Don't skip blank lines
function! NextIndent(exclusive, fwd, lowerlevel, skipblanks)
  let line = line('.')
  let column = col('.')
  let lastline = line('$')
  let indent = indent(line)
  let stepvalue = a:fwd ? 1 : -1
  while (line > 0 && line <= lastline)
    let line = line + stepvalue
    if ( ! a:lowerlevel && indent(line) == indent ||
          \ a:lowerlevel && indent(line) < indent)
      if (! a:skipblanks || strlen(getline(line)) > 0)
        if (a:exclusive)
          let line = line - stepvalue
        endif
        exe line
        exe "normal " column . "|"
        return
      endif
    endif
  endwhile
endfunction

" Moving back and forth between lines of same or lower indentation.
nnoremap <silent> [l :call NextIndent(0, 0, 0, 1)<CR>
nnoremap <silent> ]l :call NextIndent(0, 1, 0, 1)<CR>
nnoremap <silent> [L :call NextIndent(0, 0, 1, 1)<CR>
nnoremap <silent> ]L :call NextIndent(0, 1, 1, 1)<CR>
vnoremap <silent> [l <Esc>:call NextIndent(0, 0, 0, 1)<CR>m'gv''
vnoremap <silent> ]l <Esc>:call NextIndent(0, 1, 0, 1)<CR>m'gv''
vnoremap <silent> [L <Esc>:call NextIndent(0, 0, 1, 1)<CR>m'gv''
vnoremap <silent> ]L <Esc>:call NextIndent(0, 1, 1, 1)<CR>m'gv''
onoremap <silent> [l :call NextIndent(0, 0, 0, 1)<CR>
onoremap <silent> ]l :call NextIndent(0, 1, 0, 1)<CR>
onoremap <silent> [L :call NextIndent(1, 0, 1, 1)<CR>
onoremap <silent> ]L :call NextIndent(1, 1, 1, 1)<CR>

" Options for highlighting matching values of search.
"  Turn on highlighting.
set hlsearch
"  remap the space bar to toggle match highlighting off.
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
"nnoremap <leader><space> :noh<cr>

" This setting allows you to switch between buffers, leave unsaved changes
" in a buffer and have them still be there when you get back.
set hidden

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Remap :make to ant for Java files.
function SetJavaCompiler()
    set makeprg=ant
    " Things learned about efm.
    "   The pattern MUST consume the whole line, or it will just fail to match.
    "   .* regular expression is represented as %.%#
    "   :clist shows the matched lines. If no lines match, the whole output is displayed.
    "   although the docs indicate you can cat a bunch of syntax strings together, this doesn't actually work.
    set efm=\ %#[javac]\ %f:%l:%m
    set efm=\ %#[junit]\ %.at%m

    let &efm=' %#[javac] %f:%l:%m'
endfunction

"" The autocmd lines conditionally remap the makeprg if you navigate to or open Java files.
autocmd BufEnter,BufNew *.java      call SetJavaCompiler()
autocmd BufEnter,BufNew build.xml   call SetJavaCompiler()

" Maps the RE search key so it gets extended regular expressions by default.
nnoremap / /\v
vnoremap / /\v

" Configuration for easymotion, improved word motion.
let g:EasyMotion_leader_key = ','

" Set up the Go-Lang plugins. Copy-Paste from the
" Some Linux distributions set filetype in /etc/vimrc.
" Clear filetype flags before changing runtimepath to force Vim to reload them.
if exists("g:did_load_filetypes")
  filetype off
  filetype plugin indent off
endif
set runtimepath+=$GOROOT/misc/vim " replace $GOROOT with the output of: go env GOROOT
filetype plugin indent on
syntax on
autocmd FileType go compiler go

" When editing Makefiles...
function EnterMakefile()
    set noexpandtab
endfunction
function LeaveMakefile()
    set expandtab
endfunction

autocmd BufEnter,BufNew Makefile      call EnterMakefile()
autocmd BufEnter,BufNew makefile      call EnterMakefile()

autocmd BufLeave Makefile             call LeaveMakefile()
autocmd BufLeave makefile             call LeaveMakefile()


" Settings for GoVim -- https://github.com/fatih/vim-go#settings
let g:go_disable_autoinstall = 1


" ######################### NeoBundle Config
" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if has('vim_starting')
   if &compatible
     set nocompatible               " Be iMproved
   endif

   " Required:
   set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

    " Let NeoBundle manage NeoBundle
    " Required:
    NeoBundleFetch 'Shougo/neobundle.vim'

    " My Bundles here:
    " Refer to |:NeoBundle-examples|.
    " Note: You don't set neobundle setting in .gvimrc!

    " Unite is a super flexible plugin, searches buffers and the like.
    NeoBundle 'Shougo/unite.vim'
    " Support Unite with async operations.
    NeoBundle 'Shougo/vimproc.vim'

    " Syntax and other language specific settings for many languages.
    NeoBundle 'sheerun/vim-polyglot'

    " NERDTree - directory tree navigation in a Vim window.
    NeoBundle 'scrooloose/nerdtree'

    NeoBundle 'tpope/vim-surround'

    " Select with :color jellybeans
    NeoBundle 'nanotech/jellybeans.vim'
    NeoBundle 'tomasr/molokai'

    " Snippet support.
    NeoBundle 'Shougo/neocomplete'
    NeoBundle 'Shougo/neosnippet'
    NeoBundle 'Shougo/neosnippet-snippets'

    " Git access from inside Vim.
    NeoBundle 'tpope/vim-fugitive'

    " In Vim support for Silver Searcher.
    NeoBundle 'rking/ag.vim'

    " When a visual selection is active, pressing * or # will do a file
    " search of the selection, instead of a file search of the word under the
    " cursor.
    NeoBundle 'bronson/vim-visual-star-search'

    " Creates a nicer status line.
    NeoBundle 'bling/vim-airline'
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck



" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For conceal markers.
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif

" You know when you are editing a file and you try to save it only to find out
" it is write restricted and you have to exit vim and re-run it with sudo root
" just so you can save changes?
" Do :w!! instead.
cmap w!! w !sudo tee > /dev/null %

" This will execute highlighted text as VimScript.
vmap <silent> <leader>r "xy:@x<CR>

" Remap the <leader>* key to do a search analogous to how vim searches when
" the * key is hit, but across different files.
nnoremap <leader>* :Ag "<cword>"<CR>
vnoremap <leader>* :<C-u>call VisualStarSearchSet('/')<CR>:execute 'noautocmd Ag ' . @/ . ''<CR>

" Select a color scheme.
color molokai

" Improved window navigation key strokes. Fewer keys makes a big
" difference for window navigation.
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
" NOTE: C-H is special. C-H is commonly used by terminals to send the
" backspace character. So, to make this work, I had to change iTerm to send
" the C-? character as backspace (Settings -> Profile -> Select Profile ->
" Keymap -> + (to add a new keymap) -> Backspace as C-?)
" http://vi.stackexchange.com/questions/3119/mapping-control-h-in-insert-mode-doesnt-work-it-always-works-like-backspace
"-- nnoremap <C-H> <C-W><C-H> - I wished it was this easy.
nnoremap <Backspace> <C-W><C-H>

" Open new split panes to right and bottom, which feels more natural than
" Vimâ€™s default:
set splitbelow
set splitright

" Makes the Airline status bar visible at all times.
set laststatus=2

" Keep visual selection after indenting or unindenting.
vnoremap < <gv
vnoremap > >gv
vmap <TAB> >
vmap <S-TAB> <

" Make the cursor at least this many lines away from the edge of the screen.
set scrolloff=3

" Make global substitutions the default.
" So, when you do:
"     :%s/abc/123/
" it will act like:
"     :%s/abc/123/g
set gdefault

source ~/home-dir/vim/nvimrc

